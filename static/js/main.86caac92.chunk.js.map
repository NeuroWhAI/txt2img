{"version":3,"sources":["components/FontList.tsx","components/InputText.tsx","components/TextCanvas.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FontList","options","fontList","sort","map","font","key","value","text","Select","className","this","props","onChange","_e","String","compact","React","Component","InputText","Input","type","e","target","TextCanvas","canvasRef","createRef","ctx","clearRect","width","height","fillStyle","fillRect","textBaseline","textAlign","fontSize","fontName","fillText","link","document","createElement","download","href","current","toDataURL","click","getContext","drawText","fonts","onloadingdone","ref","Button","fluid","onClick","downloadImage","App","state","canvasWidth","canvasHeight","WebFont","load","google","families","setState","s","toString","onWidthChange","parseInt","onHeightChange","onFontChange","onFontSizeChange","onTextChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.86caac92.chunk.js","sourcesContent":["import React from 'react';\r\nimport './FontList.css';\r\nimport { Select } from 'semantic-ui-react';\r\n\r\ntype FontListProps = {\r\n  font: string,\r\n  onChange: (font: string) => void,\r\n};\r\n\r\nclass FontList extends React.Component<FontListProps> {\r\n  render() {\r\n    let options = fontList.sort().map((font) => ({ key: font, value: font, text: font }));\r\n    return (\r\n      <Select\r\n        className=\"font-list\"\r\n        options={options}\r\n        value={this.props.font}\r\n        onChange={(_e, { value }) => this.props.onChange(String(value) || 'Nanum Gothic')}\r\n        compact\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst fontList = [\r\n  'Roboto',\r\n  'Noto Sans KR',\r\n  'Nanum Gothic',\r\n  'Nanum Myeongjo',\r\n  'Nanum Pen Script',\r\n  'Noto Serif KR',\r\n  'Nanum Brush Script',\r\n  'Black Han Sans',\r\n  'Jua',\r\n  'Dokdo',\r\n  'Cute Font',\r\n  'Stylish',\r\n];\r\n\r\nexport default FontList;\r\n","import React from 'react';\r\nimport './InputText.css';\r\nimport { Input } from 'semantic-ui-react';\r\n\r\ntype InputTextProps = {\r\n  type: string,\r\n  text: string,\r\n  onChange: (text: string) => void,\r\n};\r\n\r\nclass InputText extends React.Component<InputTextProps> {\r\n  render() {\r\n    return (\r\n      <Input\r\n        type={this.props.type}\r\n        className='input-text'\r\n        value={this.props.text}\r\n        onChange={(e) => this.props.onChange(e.target.value)}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputText;\r\n","import React from 'react';\r\nimport './TextCanvas.css';\r\nimport { Button } from 'semantic-ui-react';\r\n\r\ntype TextCanvasProps = {\r\n  text: string,\r\n  width: number,\r\n  height: number,\r\n  fontSize: number,\r\n  fontName: string,\r\n}\r\n\r\nclass TextCanvas extends React.Component<TextCanvasProps> {\r\n  canvasRef: React.RefObject<HTMLCanvasElement> = React.createRef();\r\n  ctx: CanvasRenderingContext2D | null = null;\r\n  \r\n  drawText() {\r\n    if (this.ctx === null) {\r\n      return;\r\n    }\r\n    \r\n    // Clear canvas.\r\n    this.ctx.clearRect(0, 0, this.props.width, this.props.height);\r\n    \r\n    // Background.\r\n    this.ctx.fillStyle = 'white';\r\n    this.ctx.fillRect(0, 0, this.props.width, this.props.height);\r\n\r\n    // Text.\r\n    this.ctx.textBaseline = 'middle';\r\n    this.ctx.textAlign = 'center';\r\n    this.ctx.fillStyle = 'black';\r\n    this.ctx.font = `${this.props.fontSize}px ${this.props.fontName}`;\r\n    this.ctx.fillText(this.props.text, this.props.width / 2, this.props.height / 2);\r\n  }\r\n  \r\n  downloadImage() {\r\n    let link = document.createElement('a');\r\n    link.download = 'txt2img.png';\r\n    link.href = this.canvasRef!.current!.toDataURL();\r\n    link.click();\r\n  }\r\n  \r\n  componentDidMount() {\r\n    this.ctx = this.canvasRef!.current!.getContext('2d');\r\n    this.drawText();\r\n\r\n    (document as any).fonts.onloadingdone = () => this.drawText();\r\n  }\r\n  \r\n  componentDidUpdate() {\r\n    this.drawText();\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div>\r\n        <canvas\r\n          ref={this.canvasRef}\r\n          className='text-canvas'\r\n          width={this.props.width}\r\n          height={this.props.height}\r\n        >\r\n        </canvas>\r\n        <Button fluid onClick={() => this.downloadImage()}>Download</Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TextCanvas;\r\n","import React from 'react';\nimport WebFont from 'webfontloader';\nimport './App.css';\nimport FontList from './components/FontList';\nimport InputText from './components/InputText';\nimport TextCanvas from './components/TextCanvas';\n\ntype AppState = {\n  text: string,\n  canvasWidth: number,\n  canvasHeight: number,\n  fontSize: number,\n  fontName: string,\n};\n\nclass App extends React.Component<{}, AppState> {\n  state: AppState = {\n    text: 'Text',\n    canvasWidth: 512,\n    canvasHeight: 256,\n    fontSize: 48,\n    fontName: 'Nanum Gothic',\n  };\n\n  componentDidMount() {\n    WebFont.load({\n      google: {\n        families: [this.state.fontName],\n      },\n    });\n  }\n\n  onTextChange(text: string) {\n    this.setState({\n      text,\n    });\n  }\n\n  onWidthChange(canvasWidth: number) {\n    if (canvasWidth < 0)\n      canvasWidth = 8;\n    this.setState({\n      canvasWidth,\n    });\n  }\n\n  onHeightChange(canvasHeight: number) {\n    if (canvasHeight < 0)\n      canvasHeight = 8;\n    this.setState({\n      canvasHeight,\n    });\n  }\n  \n  onFontChange(fontName: string) {\n    WebFont.load({\n      google: {\n        families: [fontName]\n      },\n    });\n\n    this.setState({\n      fontName,\n    });\n  }\n\n  onFontSizeChange(fontSize: number) {\n    if (fontSize < 0)\n      fontSize = 4;\n    this.setState({\n      fontSize,\n    });\n  }\n  \n  render() {\n    const s = this.state;\n    return (\n      <div className=\"app-box\">\n        <h1>txt2img</h1>\n        <div className=\"col2-box\">\n          <div className=\"named-input-box\">\n            Width :\n            <InputText type=\"number\" text={s.canvasWidth.toString()} onChange={(text) => this.onWidthChange(parseInt(text))} />\n          </div>\n          <div className=\"named-input-box\">\n            Height :\n            <InputText type=\"number\" text={s.canvasHeight.toString()} onChange={(text) => this.onHeightChange(parseInt(text))} />\n          </div>\n        </div>\n        <div className=\"col2-box\">\n          <div className=\"named-input-box\">\n            Font :\n            <FontList font={s.fontName} onChange={(font) => this.onFontChange(font)} />\n          </div>\n          <div className=\"named-input-box\">\n            Size :\n            <InputText type=\"number\" text={s.fontSize.toString()} onChange={(text) => this.onFontSizeChange(parseInt(text))} />\n          </div>\n        </div>\n        <InputText type=\"text\" text={s.text} onChange={(text) => this.onTextChange(text)} />\n        <div className=\"canvas-box\">\n          <TextCanvas text={s.text} width={s.canvasWidth} height={s.canvasHeight} fontSize={s.fontSize} fontName={s.fontName} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}