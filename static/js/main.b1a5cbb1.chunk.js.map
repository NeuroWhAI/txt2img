{"version":3,"sources":["components/FontList.tsx","components/InputColor.tsx","components/InputText.tsx","components/TextCanvas.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["FontList","options","fontList","sort","map","font","key","value","text","Select","className","this","props","onChange","_e","String","compact","search","React","Component","InputColor","type","color","e","target","InputText","Input","TextCanvas","canvasRef","createRef","ctx","clearRect","width","height","fillStyle","bgColor","fillRect","textBaseline","textAlign","fgColor","fontSize","fontName","fillText","a","document","createElement","setAttribute","current","toBlob","blob","url","URL","createObjectURL","click","console","log","getContext","drawText","fonts","onloadingdone","ref","Button","fluid","onClick","downloadImage","App","state","canvasWidth","canvasHeight","WebFont","load","google","families","setState","s","toString","onWidthChange","parseInt","onHeightChange","onFontChange","onFontSizeChange","onFgColorChange","onBgColorChange","onTextChange","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.b1a5cbb1.chunk.js","sourcesContent":["import React from 'react';\r\nimport './FontList.css';\r\nimport { Select } from 'semantic-ui-react';\r\n\r\ntype FontListProps = {\r\n  font: string,\r\n  onChange: (font: string) => void,\r\n};\r\n\r\nclass FontList extends React.Component<FontListProps> {\r\n  render() {\r\n    let options = fontList.sort().map((font) => ({ key: font, value: font, text: font }));\r\n    return (\r\n      <Select\r\n        className=\"font-list\"\r\n        options={options}\r\n        value={this.props.font}\r\n        onChange={(_e, { value }) => this.props.onChange(String(value) || 'Nanum Gothic')}\r\n        compact search\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst fontList = [\r\n  'Roboto',\r\n  'Noto Sans KR',\r\n  'Noto Sans JP',\r\n  'Nanum Gothic',\r\n  'Nanum Myeongjo',\r\n  'Nanum Pen Script',\r\n  'Noto Serif KR',\r\n  'Noto Serif JP',\r\n  'Nanum Brush Script',\r\n  'Black Han Sans',\r\n  'Jua',\r\n  'Dokdo',\r\n  'Cute Font',\r\n  'Stylish',\r\n  'Reggae One',\r\n  'Sawarabi Gothic',\r\n  'Kosugi Maru',\r\n  'Shippori Mincho',\r\n  'Dela Gothic One',\r\n  'Kiwi Maru',\r\n  'DotGothic16',\r\n  'Stick',\r\n  'Train One',\r\n  'Hachi Maru Pop',\r\n  'Potta One',\r\n  'Yusei Magic',\r\n  'New Tegomin',\r\n];\r\n\r\nexport default FontList;\r\n","import React from 'react';\r\nimport './InputColor.css';\r\n\r\ntype InputColorProps = {\r\n  color: string,\r\n  onChange: (color: string) => void,\r\n};\r\n\r\nclass InputColor extends React.Component<InputColorProps> {\r\n  render() {\r\n    return (\r\n      <input\r\n        type='color'\r\n        className='input-color'\r\n        value={this.props.color}\r\n        onChange={(e) => this.props.onChange(e.target.value)}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputColor;\r\n\r\n","import React from 'react';\r\nimport './InputText.css';\r\nimport { Input } from 'semantic-ui-react';\r\n\r\ntype InputTextProps = {\r\n  type: string,\r\n  text: string,\r\n  onChange: (text: string) => void,\r\n};\r\n\r\nclass InputText extends React.Component<InputTextProps> {\r\n  render() {\r\n    return (\r\n      <Input\r\n        type={this.props.type}\r\n        className='input-text'\r\n        value={this.props.text}\r\n        onChange={(e) => this.props.onChange(e.target.value)}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputText;\r\n","import React from 'react';\r\nimport './TextCanvas.css';\r\nimport { Button } from 'semantic-ui-react';\r\n\r\ntype TextCanvasProps = {\r\n  text: string,\r\n  width: number,\r\n  height: number,\r\n  fontSize: number,\r\n  fontName: string,\r\n  fgColor: string,\r\n  bgColor: string,\r\n}\r\n\r\nclass TextCanvas extends React.Component<TextCanvasProps> {\r\n  canvasRef: React.RefObject<HTMLCanvasElement> = React.createRef();\r\n  ctx: CanvasRenderingContext2D | null = null;\r\n  \r\n  drawText() {\r\n    if (this.ctx === null) {\r\n      return;\r\n    }\r\n    \r\n    // Clear canvas.\r\n    this.ctx.clearRect(0, 0, this.props.width, this.props.height);\r\n    \r\n    // Background.\r\n    this.ctx.fillStyle = this.props.bgColor;\r\n    this.ctx.fillRect(0, 0, this.props.width, this.props.height);\r\n\r\n    // Text.\r\n    this.ctx.textBaseline = 'middle';\r\n    this.ctx.textAlign = 'center';\r\n    this.ctx.fillStyle = this.props.fgColor;\r\n    this.ctx.font = `${this.props.fontSize}px ${this.props.fontName}`;\r\n    this.ctx.fillText(this.props.text, this.props.width / 2, this.props.height / 2);\r\n  }\r\n  \r\n  downloadImage() {\r\n    let a = document.createElement('a');\r\n    a.setAttribute('download', 'txt2img.png');\r\n    a.setAttribute('target', '_blank');\r\n    this.canvasRef!.current!.toBlob((blob) => {\r\n      let url = URL.createObjectURL(blob);\r\n      a.setAttribute('href', url);\r\n      a.click();\r\n      console.log(\"Download \" + url);\r\n    });\r\n}\r\n  \r\n  componentDidMount() {\r\n    this.ctx = this.canvasRef!.current!.getContext('2d');\r\n    this.drawText();\r\n\r\n    (document as any).fonts.onloadingdone = () => this.drawText();\r\n  }\r\n  \r\n  componentDidUpdate() {\r\n    this.drawText();\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div>\r\n        <canvas\r\n          ref={this.canvasRef}\r\n          className='text-canvas'\r\n          width={this.props.width}\r\n          height={this.props.height}\r\n        >\r\n        </canvas>\r\n        <Button fluid onClick={() => this.downloadImage()}>Download</Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TextCanvas;\r\n","import React from 'react';\nimport WebFont from 'webfontloader';\nimport './App.css';\nimport FontList from './components/FontList';\nimport InputColor from './components/InputColor';\nimport InputText from './components/InputText';\nimport TextCanvas from './components/TextCanvas';\n\ntype AppState = {\n  text: string,\n  canvasWidth: number,\n  canvasHeight: number,\n  fontSize: number,\n  fontName: string,\n  bgColor: string,\n  fgColor: string,\n};\n\nclass App extends React.Component<{}, AppState> {\n  state: AppState = {\n    text: 'Text',\n    canvasWidth: 512,\n    canvasHeight: 256,\n    fontSize: 48,\n    fontName: 'Nanum Gothic',\n    bgColor: '#FFFFFF',\n    fgColor: '#000000',\n  };\n\n  componentDidMount() {\n    WebFont.load({\n      google: {\n        families: [this.state.fontName],\n      },\n    });\n  }\n\n  onTextChange(text: string) {\n    this.setState({\n      text,\n    });\n  }\n\n  onWidthChange(canvasWidth: number) {\n    if (canvasWidth < 0)\n      canvasWidth = 8;\n    this.setState({\n      canvasWidth,\n    });\n  }\n\n  onHeightChange(canvasHeight: number) {\n    if (canvasHeight < 0)\n      canvasHeight = 8;\n    this.setState({\n      canvasHeight,\n    });\n  }\n\n  onFontChange(fontName: string) {\n    WebFont.load({\n      google: {\n        families: [fontName]\n      },\n    });\n\n    this.setState({\n      fontName,\n    });\n  }\n\n  onFontSizeChange(fontSize: number) {\n    if (fontSize < 0)\n      fontSize = 4;\n    this.setState({\n      fontSize,\n    });\n  }\n\n  onBgColorChange(bgColor: string) {\n    this.setState({\n      bgColor,\n    });\n  }\n\n  onFgColorChange(fgColor: string) {\n    this.setState({\n      fgColor,\n    });\n  }\n\n  render() {\n    const s = this.state;\n    return (\n      <div className=\"app-box\">\n        <h1>txt2img</h1>\n        <div className=\"col2-box\">\n          <div className=\"named-input-box\">\n            Width :\n            <InputText type=\"number\" text={s.canvasWidth.toString()} onChange={(text) => this.onWidthChange(parseInt(text))} />\n          </div>\n          <div className=\"named-input-box\">\n            Height :\n            <InputText type=\"number\" text={s.canvasHeight.toString()} onChange={(text) => this.onHeightChange(parseInt(text))} />\n          </div>\n        </div>\n        <div className=\"col2-box\">\n          <div className=\"named-input-box\">\n            Font :\n            <FontList font={s.fontName} onChange={(font) => this.onFontChange(font)} />\n          </div>\n          <div className=\"named-input-box\">\n            Size :\n            <InputText type=\"number\" text={s.fontSize.toString()} onChange={(text) => this.onFontSizeChange(parseInt(text))} />\n          </div>\n        </div>\n        <div className=\"col2-box\">\n          <div className=\"named-input-box\">\n            Fore :\n            <InputColor color={s.fgColor} onChange={(color) => this.onFgColorChange(color)} />\n          </div>\n          <div className=\"named-input-box\">\n            Back :\n            <InputColor color={s.bgColor} onChange={(color) => this.onBgColorChange(color)} />\n          </div>\n        </div>\n        <InputText type=\"text\" text={s.text} onChange={(text) => this.onTextChange(text)} />\n        <div className=\"canvas-box\">\n          <TextCanvas\n            text={s.text}\n            width={s.canvasWidth}\n            height={s.canvasHeight}\n            fontSize={s.fontSize}\n            fontName={s.fontName}\n            fgColor={s.fgColor}\n            bgColor={s.bgColor}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}